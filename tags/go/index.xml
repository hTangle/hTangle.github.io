<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on HLDay</title>
    <link>/tags/go/</link>
    <description>Recent content in go on HLDay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Dec 2022 20:25:19 +0800</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>必应每日一图api接口</title>
      <link>/post/bing/</link>
      <pubDate>Mon, 05 Dec 2022 20:25:19 +0800</pubDate>
      
      <guid>/post/bing/</guid>
      <description>必应每日一图api接口文档</description>
    </item>
    
    <item>
      <title>Defer Panic Recovery</title>
      <link>/post/golang/defer-panic-recovery/</link>
      <pubDate>Fri, 24 Jun 2022 14:53:41 +0800</pubDate>
      
      <guid>/post/golang/defer-panic-recovery/</guid>
      <description>Golang defer/panic/recovery功能的原理分析</description>
    </item>
    
    <item>
      <title>GMP调度原理</title>
      <link>/post/golang/gmp/</link>
      <pubDate>Wed, 09 Mar 2022 20:59:22 +0800</pubDate>
      
      <guid>/post/golang/gmp/</guid>
      <description>Goroutine 调度器过程及原理</description>
    </item>
    
    <item>
      <title>工厂模式</title>
      <link>/post/design-pattern/factory_pattern/</link>
      <pubDate>Tue, 08 Mar 2022 15:51:07 +0800</pubDate>
      
      <guid>/post/design-pattern/factory_pattern/</guid>
      <description>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</description>
    </item>
    
    <item>
      <title>Raft</title>
      <link>/post/bigdata/raft/</link>
      <pubDate>Tue, 08 Mar 2022 14:42:17 +0800</pubDate>
      
      <guid>/post/bigdata/raft/</guid>
      <description>Raft is a consensus algorithm designed as an alternative to the Paxos family of algorithms. It was meant to be more understandable than Paxos by means of separation of logic, but it is also formally proven safe and offers some additional features. Raft offers a generic way to distribute a state machine across a cluster of computing systems, ensuring that each node in the cluster agrees upon the same series of state transitions. It has a number of open-source reference implementations, with full-specification implementations in Go, C++, Java, and Scala. It is named after Reliable, Replicated, Redundant, And Fault-Tolerant.</description>
    </item>
    
  </channel>
</rss>
