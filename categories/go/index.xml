<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on HLDay</title>
    <link>/categories/go/</link>
    <description>Recent content in go on HLDay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Feb 2023 18:37:13 +0800</lastBuildDate><atom:link href="/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GO使用io.TeeReader显示下载进度</title>
      <link>/post/golang/monitor_download_progress/</link>
      <pubDate>Mon, 13 Feb 2023 18:37:13 +0800</pubDate>
      
      <guid>/post/golang/monitor_download_progress/</guid>
      <description>通过io.TeeReader显示http下载的下载进度</description>
    </item>
    
    <item>
      <title>Go中的错误的懒汉式双重检测单例编程模式带来的思考</title>
      <link>/post/golang/incorrect-synchronization/</link>
      <pubDate>Fri, 29 Jul 2022 14:15:05 +0800</pubDate>
      
      <guid>/post/golang/incorrect-synchronization/</guid>
      <description>通过Go代码片段介绍了Go内存模型、CPU缓存一致性协议MESI、Happen Before</description>
    </item>
    
    <item>
      <title>Defer Panic Recovery</title>
      <link>/post/golang/defer-panic-recovery/</link>
      <pubDate>Fri, 24 Jun 2022 14:53:41 +0800</pubDate>
      
      <guid>/post/golang/defer-panic-recovery/</guid>
      <description>Golang defer/panic/recovery功能的原理分析</description>
    </item>
    
    <item>
      <title>Go调用系统编辑器编辑文件</title>
      <link>/post/golang/go-open-editor/</link>
      <pubDate>Tue, 21 Jun 2022 20:19:17 +0800</pubDate>
      
      <guid>/post/golang/go-open-editor/</guid>
      <description>通过go打开一个编辑器，编辑完成后需要处理修改后的文件</description>
    </item>
    
    <item>
      <title>GMP调度原理</title>
      <link>/post/golang/gmp/</link>
      <pubDate>Wed, 09 Mar 2022 20:59:22 +0800</pubDate>
      
      <guid>/post/golang/gmp/</guid>
      <description>Goroutine 调度器过程及原理</description>
    </item>
    
    <item>
      <title>Raft</title>
      <link>/post/bigdata/raft/</link>
      <pubDate>Tue, 08 Mar 2022 14:42:17 +0800</pubDate>
      
      <guid>/post/bigdata/raft/</guid>
      <description>Raft is a consensus algorithm designed as an alternative to the Paxos family of algorithms. It was meant to be more understandable than Paxos by means of separation of logic, but it is also formally proven safe and offers some additional features. Raft offers a generic way to distribute a state machine across a cluster of computing systems, ensuring that each node in the cluster agrees upon the same series of state transitions. It has a number of open-source reference implementations, with full-specification implementations in Go, C++, Java, and Scala. It is named after Reliable, Replicated, Redundant, And Fault-Tolerant.</description>
    </item>
    
  </channel>
</rss>
